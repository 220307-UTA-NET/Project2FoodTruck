// <auto-generated />
using System;
using FoodTruckAPI.ClassLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodTruckAPI.ClassLibrary.Migrations
{
    [DbContext(typeof(FoodTruckContext))]
    partial class FoodTruckContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Drink1ID")
                        .HasColumnType("int");

                    b.Property<int>("Drink2ID")
                        .HasColumnType("int");

                    b.Property<int>("Main1ID")
                        .HasColumnType("int");

                    b.Property<int>("Main2ID")
                        .HasColumnType("int");

                    b.Property<int>("Main3ID")
                        .HasColumnType("int");

                    b.Property<int>("Side1ID")
                        .HasColumnType("int");

                    b.Property<int>("Side2ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Drink1ID");

                    b.HasIndex("Drink2ID");

                    b.HasIndex("Main1ID");

                    b.HasIndex("Main2ID");

                    b.HasIndex("Main3ID");

                    b.HasIndex("Side1ID");

                    b.HasIndex("Side2ID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.MenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.Truck", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("Emp1ID")
                        .HasColumnType("int");

                    b.Property<int>("Emp2ID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("menuID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Emp1ID");

                    b.HasIndex("Emp2ID");

                    b.HasIndex("menuID");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.Menu", b =>
                {
                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Drink1")
                        .WithMany()
                        .HasForeignKey("Drink1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Drink2")
                        .WithMany()
                        .HasForeignKey("Drink2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Main1")
                        .WithMany()
                        .HasForeignKey("Main1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Main2")
                        .WithMany()
                        .HasForeignKey("Main2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Main3")
                        .WithMany()
                        .HasForeignKey("Main3ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Side1")
                        .WithMany()
                        .HasForeignKey("Side1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.MenuItem", "Side2")
                        .WithMany()
                        .HasForeignKey("Side2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drink1");

                    b.Navigation("Drink2");

                    b.Navigation("Main1");

                    b.Navigation("Main2");

                    b.Navigation("Main3");

                    b.Navigation("Side1");

                    b.Navigation("Side2");
                });

            modelBuilder.Entity("FoodTruckAPI.ClassLibrary.Models.Truck", b =>
                {
                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.Employee", "Emp1")
                        .WithMany()
                        .HasForeignKey("Emp1ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.Employee", "Emp2")
                        .WithMany()
                        .HasForeignKey("Emp2ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodTruckAPI.ClassLibrary.Models.Menu", "menu")
                        .WithMany()
                        .HasForeignKey("menuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Emp1");

                    b.Navigation("Emp2");

                    b.Navigation("menu");
                });
#pragma warning restore 612, 618
        }
    }
}
